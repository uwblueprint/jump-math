import {
  MultipleChoiceMetadata,
  NumericQuestionMetadata,
  QuestionType,
} from "../../models/test.model";
import { UserDTO } from "../../types";

export type TestResponseDTO = {
  /** the unique identifier of the response */
  id: string;
  /** the name of the test */
  name: string;
  /** the duration of the test */
  duration: number;
  /** the UserDTO for the admin */
  admin: UserDTO;
  /** an array of questions on the test */
  questions: QuestionResponseDTO[];
  /** the grade of the student */
  grade: number;
};

/** the request input expects an admin userId string rather than a UserDTO */
export type CreateTestRequestDTO = Omit<TestResponseDTO, "id" | "admin"> & {
  admin: string;
  questions: QuestionRequestDTO[];
};

export interface QuestionRequestDTO {
  /** the type of question  */
  questionType: QuestionType;
  /** the prompt of the question */
  questionPrompt: string;
  /** additional metadata for the question */
  questionMetadata: MultipleChoiceMetadata | NumericQuestionMetadata;
  /** the file path of the optional image associated with the question */
  imageFilePath?: string;
  /** the file content type of the optional image associated with the question */
  imageFileContentType?: string;
  /** the autogenerated file name of the optional image associated with the question */
  imageFileName?: string;
  /** the optional description of the image */
  imageDescription?: string;
}

export interface QuestionResponseDTO {
  /** the type of question  */
  questionType: QuestionType;
  /** the prompt of the question */
  questionPrompt: string;
  /** additional metadata for the question */
  questionMetadata: MultipleChoiceMetadata | NumericQuestionMetadata;
  /** the optional image associated with the question */
  imageFileName?: string;
  /** the optional description of the image */
  imageDescription?: string;
}

export interface ITestService {
  /**
   * create a new Test with the fields given in the DTO test, return created Test
   * @param test CreateTestRequest object containing test info
   * @returns a TestDTO with the created test
   * @throws Error if creation fails
   */
  createTest(test: CreateTestRequestDTO): Promise<TestResponseDTO>;

  /**
   * delete a Test with the given id, return deleted id
   * @param id id to delete
   * @returns deleted id
   * @throws Error if deletion fails
   */
  deleteTest(id: string): Promise<string>;

  /**
   * Find a test given the id
   * This method updates a Test document by its unique identifier in the database.
   *
   * @param id The unique identifier of the Test document to update
   * @param test The object containing the updated the Test
   */
  updateTest(id: string, test: CreateTestRequestDTO): Promise<TestResponseDTO>;

  /* Find a test given the id
   * @param id string with the test id to be found
   * @returns a TestDTO with the test that has the given id
   * @throws Error if test with given id not found
   */
  getTestById(id: string): Promise<TestResponseDTO>;
}
